// Prisma schema for NERIN Electric platform
// Auto-generated by ChatGPT to satisfy domain requirements

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // Utilizamos SQLite por defecto para simplificar despliegues en Render u otros entornos sin PostgreSQL.
  provider  = "sqlite"
  url       = env("DATABASE_URL")
  // Prisma requiere que `directUrl` exista si la clave está definida; reutilizamos el mismo valor que `url`.
  directUrl = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String   @default("")
  email         String   @unique
  emailVerified DateTime?
  role          String   @default("cliente")
  empresa       String?
  cuit          String?
  telefono      String?
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  // relations
  accounts      Account[]
  sessions      Session[]
  clientProfile Client?
  technician    Technician?
  tickets       TicketMessage[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Client {
  id         String   @id @default(cuid())
  userId     String   @unique
  direccion  String?
  ciudad     String?
  notas      String?
  approved   Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects   Project[]
  tickets    Ticket[]
  maintenanceSubscriptions MaintenanceSubscription[]
}

model Project {
  id                   String           @id @default(cuid())
  clientId             String
  nombre               String
  tipo                 String   @default("vivienda")
  estado               String   @default("planificado")
  direccion            String
  metros2              Int?
  normativasAplicadas  String   @default("[]")
  fechaInicio          DateTime?
  fechaFinEstimada     DateTime?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  client               Client          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  quotes               ConfiguratorQuote[]
  workOrders           WorkOrder[]
  progressCertificates ProgressCertificate[]
  invoices             Invoice[]
  tickets              Ticket[]
}

model Pack {
  id           String   @id @default(cuid())
  name         String
  slug         String   @unique
  description  String   @default("")
  scope        String   @default("")
  basePrice    Int      @default(0)
  advancePrice Int      @default(0)
  features     String   @default("[]")
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  additionalItems    AdditionalItem[]
  configuratorQuotes ConfiguratorQuote[]
}

model AdditionalItem {
  id                       String   @id @default(cuid())
  packId                   String?
  nombre                   String
  descripcion              String
  unidad                   String
  precioUnitarioManoObra   Decimal
  reglasCompatibilidad     String?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  pack                     Pack?    @relation(fields: [packId], references: [id])
  configuratorQuoteItems   ConfiguratorQuoteItem[]
}

model ConfiguratorQuote {
  id                        String                  @id @default(cuid())
  projectId                 String?
  packId                    String
  itemsSeleccionados        String   @default("{}")
  totalManoObra             Decimal
  proyectoElectricoAparte   Decimal @default(500000)
  materialesIncluidos       Boolean                 @default(false)
  aclaracionesMateriales    String?                 @default("Materiales se cotizan aparte según marcas.")
  pdfUrl                    String?
  createdAt                 DateTime                @default(now())
  updatedAt                 DateTime                @updatedAt
  project                   Project?                @relation(fields: [projectId], references: [id])
  pack                      Pack                    @relation(fields: [packId], references: [id], onDelete: Cascade)
  clientViewToken           String?                 @unique
  configuratorQuoteItems    ConfiguratorQuoteItem[]
}

model ConfiguratorQuoteItem {
  id                  String           @id @default(cuid())
  quoteId             String
  additionalItemId    String?
  descripcion         String
  cantidad            Int      @default(1)
  precioUnitario      Decimal
  subtotal            Decimal
  quote               ConfiguratorQuote @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  additionalItem      AdditionalItem?   @relation(fields: [additionalItemId], references: [id])
}

model MaintenancePlan {
  id                           String   @id @default(cuid())
  slug                         String   @unique
  nombre                       String
  incluyeTareasFijas           String   @default("[]")
  visitasMes                   Int
  precioMensual                Decimal
  cantidadesFijasInalterables  Boolean  @default(true)
  descripcion                  String?
  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @updatedAt
  subscriptions                MaintenanceSubscription[]
}

model MaintenanceSubscription {
  id               String   @id @default(cuid())
  planId           String
  clientId         String
  estado           String   @default("pendiente")
  inicio           DateTime @default(now())
  mpPreferenceId   String?
  mpInitPointUrl   String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  plan             MaintenancePlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  client           Client          @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model WorkOrder {
  id              String   @id @default(cuid())
  projectId       String
  visitas         Int
  checklist       String   @default("[]")
  fotos           String   @default("[]")
  firmadoPorCliente Boolean @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  project         Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model ProgressCertificate {
  id              String         @id @default(cuid())
  projectId       String
  porcentaje      Int
  monto           Decimal
  estado          String   @default("pendiente")
  mpPreferenceId  String?
  mpInitPointUrl  String?
  paidAt          DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  project         Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Invoice {
  id        String        @id @default(cuid())
  projectId String
  estado    String   @default("pendiente")
  urlPdf    String?
  fecha     DateTime?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  project   Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model CaseStudy {
  id         String   @id @default(cuid())
  titulo     String
  slug       String   @unique
  resumen    String
  contenido  String
  fotos      String   @default("[]")
  metricas   String?
  publicado  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Brand {
  id      String   @id @default(cuid())
  nombre  String   @unique
  logoUrl String?
}

model Technician {
  id           String   @id @default(cuid())
  userId       String   @unique
  credenciales String   @default("[]")
  fotoUrl      String?
  activo       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Ticket {
  id         String        @id @default(cuid())
  clientId   String
  projectId  String?
  asunto     String
  estado     String   @default("abierto")
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  mensajes   TicketMessage[]
  client     Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  project    Project?     @relation(fields: [projectId], references: [id])
}

model TicketMessage {
  id        String   @id @default(cuid())
  ticketId  String
  userId    String
  mensaje   String
  creadoEn  DateTime @default(now())
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SiteSetting {
  id               String   @id @default(cuid())
  whatsappNumber   String   @default("5491100000000")
  whatsappMessage  String   @default("Hola, soy [Nombre]. Quiero cotizar un servicio eléctrico con NERIN.")
  direccionOficina String   @default("CABA, Argentina")
  emailContacto    String   @default("hola@nerin.com.ar")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

